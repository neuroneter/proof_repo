{"ast":null,"code":"import _classCallCheck from\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Row,Col,CardImg,InputGroupAddon,InputGroup,InputGroupText,Input,CardHeader,Container}from'reactstrap';import Logo from\"../assets/images/Logo_ML.png\";import searchIcon from\"../assets/images/ic_Search.png\";import{connect}from'react-redux';import DAO from\"../components/Dao\";import queryString from'query-string';/**\n * Clase del componente que se encarga del buscador\n */var Header=/*#__PURE__*/function(_Component){_inherits(Header,_Component);var _super=_createSuper(Header);/**\n\t * Constructor\n\t */function Header(props){var _this;_classCallCheck(this,Header);_this=_super.call(this,props);//Definimos el estado y cargamos en el, el valor de la busqueda \n//si no hay valor se asigna un valor en blanco \n_this.state={find:_this.props.match.params.search?_this.props.match.params.search:\"\"};return _this;}//Funcion nativa que es ejecutada automaticamente al cargar el componente \n//buscamos identificaar si hay una busqueda previa al cargar el componente\n_createClass(Header,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;//Obtenemos la ubicaci칩n de la ruta donde nos encontramos esto se realiza ya que este componente\n//es cargado en dos rutas y solo en una el componente al ser llamado realizara un llamado para busqueda\n//automatica \nvar pathname=String(this.props.location.pathname);//Si nos encontramos en la ruta /items y se llama este componente realizaremos una llamada Rest automatica\nif(pathname===\"/items\"){//obtenemos el varlo de la busqueda \nvar find=queryString.parse(this.props.location.search);//Si este valor existe lo asignamos al state local y llamamos una vez asignado a la funcion que llama\n//al distpatch \nfind=String(find.search)!==\"undefined\"?String(find.search):\"\";this.setState({find:find},function(){//llamamos al dispatch primero pasando por el Dao que recupera los datos desde API Rest\n_this2.callFind();});}}/**\n     * Funcion que es llamada cuando se realiza una acci칩n enter de busqueda o clic en buscar \n     */},{key:\"callFind\",value:function callFind(){//Verifica si un Id de Item para enviar a limpiar el objeto store de la ultima consulta de productos \n//con el fin de evitar visualizar los productos de una busqueda pasada esto por unos segundos \nif(this.props.match.params.id!==undefined)this.props.clearProducts(\"cQuery\");//verificamos si hay un valor cargado de busqueda, se hace por si se recarga o se ingresa \n//con una url que contenga definida una busqueda \nvar search=this.state.find!==\"\"?'?search='+this.state.find:\"\";//Redireccionamos al la ruta que renderiza la informaci칩n del producto \nthis.props.history.push({pathname:'/items',search:search});//llamamos al distpatch que pasa primero por una llamada al API Rest a travez del DAO \nthis.props.callDispatch(this.state.find);}//Funcion que renderiza el componente\n},{key:\"render\",value:function render(){var _this3=this;//Definimos los tama침os y posiciones del renderizado \nvar pos={logo:{size:1,offset:1},barSerch:{size:9}};return/*#__PURE__*/React.createElement(CardHeader,{className:\"bg-success\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:pos.logo,className:\"prodHCol1\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(\"img\",{src:Logo,className:\"d-block\",alt:\"Mercadolibre.com\"}))),/*#__PURE__*/React.createElement(Col,{md:pos.barSerch,className:\"prodHCol2\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(InputGroup,null,/*#__PURE__*/React.createElement(Input,{type:\"text\",id:\"name\",placeholder:\"Nunca dejes de buscar\",defaultValue:this.state.find,onChange:function onChange(find){_this3.setState({find:find.target.value});},onKeyDown:function onKeyDown(e){if(e.key==='Enter')_this3.callFind();}}),/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\",onClick:this.callFind.bind(this)},/*#__PURE__*/React.createElement(InputGroupText,null,/*#__PURE__*/React.createElement(CardImg,{width:\"100%\",src:searchIcon}))))))));}}]);return Header;}(Component);//Funcion que conecta al store a travez del reducer \n//obj es cargado a las props y permite acceder a los datos gestionados por el distpacher ReducerSearch -> Rsearch\nvar mapStateToProps=function mapStateToProps(state){return{obj:state.ReducerSearch};};//Funcion que instancia la funcion distpatch la cual recibe el valor que le permite al distpache \n//identificar la accion a realizar sobre el store\nvar mapDispatchToProps=function mapDispatchToProps(dispatch){return{callDispatch:function callDispatch(data){DAO.getProducts(dispatch,data);},clearProducts:function clearProducts(type){dispatch({type:type});}};};//connectamos al redux los metodos instanciados.\nexport default connect(mapStateToProps,mapDispatchToProps)(Header);","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/src/canvan/Header.js"],"names":["React","Component","Row","Col","CardImg","InputGroupAddon","InputGroup","InputGroupText","Input","CardHeader","Container","Logo","searchIcon","connect","DAO","queryString","Header","props","state","find","match","params","search","pathname","String","location","parse","setState","callFind","id","undefined","clearProducts","history","push","callDispatch","pos","logo","size","offset","barSerch","target","value","e","key","bind","mapStateToProps","obj","ReducerSearch","mapDispatchToProps","dispatch","data","getProducts","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Row, Col, CardImg, InputGroupAddon, InputGroup, InputGroupText, Input, CardHeader, Container} from 'reactstrap';\nimport Logo from \"../assets/images/Logo_ML.png\";\nimport searchIcon from \"../assets/images/ic_Search.png\";\nimport { connect } from 'react-redux';\nimport DAO from \"../components/Dao\";\nimport queryString from 'query-string';\n\n/**\n * Clase del componente que se encarga del buscador\n */\nclass Header extends Component{\n\n    /**\n\t * Constructor\n\t */\n    constructor(props) {\n        super(props);\n        //Definimos el estado y cargamos en el, el valor de la busqueda \n        //si no hay valor se asigna un valor en blanco \n        this.state = {\n            find:(this.props.match.params.search)?this.props.match.params.search:\"\",\n        };\n    }\n\n    //Funcion nativa que es ejecutada automaticamente al cargar el componente \n    //buscamos identificaar si hay una busqueda previa al cargar el componente\n    componentDidMount(){\n        //Obtenemos la ubicaci칩n de la ruta donde nos encontramos esto se realiza ya que este componente\n        //es cargado en dos rutas y solo en una el componente al ser llamado realizara un llamado para busqueda\n        //automatica \n        var pathname = String(this.props.location.pathname)\n        //Si nos encontramos en la ruta /items y se llama este componente realizaremos una llamada Rest automatica\n        if(pathname === \"/items\"){\n            //obtenemos el varlo de la busqueda \n            let find = queryString.parse(this.props.location.search);\n            //Si este valor existe lo asignamos al state local y llamamos una vez asignado a la funcion que llama\n            //al distpatch \n            find = (String(find.search) !== \"undefined\")?String(find.search):\"\";\n            this.setState({find},() => {\n                //llamamos al dispatch primero pasando por el Dao que recupera los datos desde API Rest\n                this.callFind();\n            });\n        }\n    }\n    \n    /**\n     * Funcion que es llamada cuando se realiza una acci칩n enter de busqueda o clic en buscar \n     */\n    callFind(){\n        //Verifica si un Id de Item para enviar a limpiar el objeto store de la ultima consulta de productos \n        //con el fin de evitar visualizar los productos de una busqueda pasada esto por unos segundos \n        if(this.props.match.params.id !== undefined) this.props.clearProducts(\"cQuery\");\n        //verificamos si hay un valor cargado de busqueda, se hace por si se recarga o se ingresa \n        //con una url que contenga definida una busqueda \n        var search = (this.state.find !== \"\")? '?search='+this.state.find:\"\";\n        //Redireccionamos al la ruta que renderiza la informaci칩n del producto \n        this.props.history.push({\n            pathname: '/items',\n            search\n        })\n        //llamamos al distpatch que pasa primero por una llamada al API Rest a travez del DAO \n        this.props.callDispatch(this.state.find);\n    }\n    \n    //Funcion que renderiza el componente\n\trender(){\n        //Definimos los tama침os y posiciones del renderizado \n        const pos = {logo:{size:1, offset:1} , barSerch:{size:9}}\n\t\treturn(\n            <CardHeader className=\"bg-success\">\n                <Row>\n                    <Col md={pos.logo} className=\"prodHCol1\">\n                        <Container fluid={true}>\n                            <img src={Logo} className=\"d-block\" alt=\"Mercadolibre.com\" />\n                        </Container>\n                    </Col>\n\n                    <Col md={pos.barSerch} className=\"prodHCol2\">\n                        <Container fluid={true}>\n                            <InputGroup>\n                                <Input type=\"text\" id=\"name\" placeholder=\"Nunca dejes de buscar\" defaultValue={this.state.find} onChange={(find) => {this.setState({find:find.target.value})}} onKeyDown={(e) => {if (e.key === 'Enter') this.callFind()}}/>\n                                    <InputGroupAddon addonType=\"prepend\" onClick={this.callFind.bind(this)}>\n                                    <InputGroupText><CardImg width=\"100%\" src={searchIcon}/></InputGroupText>\n                                </InputGroupAddon>\n                            </InputGroup>\n                        </Container>\n                    </Col>\n                </Row>\n            </CardHeader>\n\t\t)\n\t}\n}\n\n//Funcion que conecta al store a travez del reducer \n//obj es cargado a las props y permite acceder a los datos gestionados por el distpacher ReducerSearch -> Rsearch\nconst mapStateToProps = (state) => {\n    return{\n        obj:state.ReducerSearch\n    }\n}\n \n//Funcion que instancia la funcion distpatch la cual recibe el valor que le permite al distpache \n//identificar la accion a realizar sobre el store\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n        callDispatch:(data) => {\n            DAO.getProducts(dispatch, data);\n        },\n        clearProducts:(type) => {\n            dispatch({type});\n        }\n    }\n}\n\n//connectamos al redux los metodos instanciados.\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);"]},"metadata":{},"sourceType":"module"}