{"ast":null,"code":"var _jsxFileName = \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/TEST-ML/test_ml/src/canvan/Breadcrumbs.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, CardBody, Container } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport DAO from \"../components/Dao\";\n/**\n * Clase del componente miga de pan\n */\n\nclass BreadCrumbs extends Component {\n  /**\n   * Constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.breadCrumb = this.breadCrumb.bind(this);\n  }\n  /**\n   * Funcion que construye la miga de pan \n   * @param {*} obj Contiene la información del store que contiene la respuesta de la consulta \n   */\n\n\n  breadCrumb(obj) {\n    var categories;\n    console.log(obj);\n    if (this.props.match.params.id) categories = obj.item.categories;else categories = obj.query.categorie; //Verificamos si hay valores retornados para la construcción de las categorias que conforman la miga de pan \n\n    if (categories && categories.length > 0) {\n      //Variable con la que concatenamos la miga de paan \n      var breadcrub = \"\";\n      categories.forEach((val, item) => {\n        breadcrub += categories.length - 1 === item ? val.name : val.name + \" > \";\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 5\n        }\n      }, breadcrub);\n    }\n\n    return \"\";\n  } //Funcion que renderiza el componente\n\n\n  render() {\n    //Definimos los tamaños y posiciones del renderizado \n    const pos = {\n      breadcrumb: {\n        size: 10,\n        offset: 1\n      }\n    };\n    return /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: pos.breadcrumb,\n      sm: pos.breadcrumb,\n      md: pos.breadcrumb,\n      className: \"BreadCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, this.breadCrumb(this.props.obj)))));\n  }\n\n} //Funcion que conecta al store a travez del reducer \n//obj es cargado a las props y permite acceder a los datos gestionados por el distpacher ReducerSearch -> Rsearch\n\n\nconst mapStateToProps = state => {\n  return {\n    obj: state.ReducerSearch\n  };\n}; //Funcion que instancia la funcion distpatch la cual recibe el valor que le permite al distpache \n//identificar la accion a realizar sobre el store\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    callDispatch: data => {\n      DAO.getProducts(dispatch, data);\n    }\n  };\n}; //connectamos al redux los metodos instanciados.\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BreadCrumbs);","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/TEST-ML/test_ml/src/canvan/Breadcrumbs.js"],"names":["React","Component","Row","Col","CardBody","Container","connect","DAO","BreadCrumbs","constructor","props","state","breadCrumb","bind","obj","categories","console","log","match","params","id","item","query","categorie","length","breadcrub","forEach","val","name","render","pos","breadcrumb","size","offset","mapStateToProps","ReducerSearch","mapDispatchToProps","dispatch","callDispatch","data","getProducts"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,QAAlB,EAA4BC,SAA5B,QAA4C,YAA5C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA;;;;AAGA,MAAMC,WAAN,SAA0BP,SAA1B,CAAmC;AAElC;;;AAGGQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACrB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA;AAED;;;;;;AAIAD,EAAAA,UAAU,CAACE,GAAD,EAAK;AAEd,QAAIC,UAAJ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,QAAG,KAAKJ,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBC,EAA3B,EAA+BL,UAAU,GAAGD,GAAG,CAACO,IAAJ,CAASN,UAAtB,CAA/B,KACKA,UAAU,GAAGD,GAAG,CAACQ,KAAJ,CAAUC,SAAvB,CALS,CAOd;;AACA,QAAGR,UAAU,IAAIA,UAAU,CAACS,MAAX,GAAoB,CAArC,EAAuC;AACtC;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAV,MAAAA,UAAU,CAACW,OAAX,CAAmB,CAACC,GAAD,EAAMN,IAAN,KAAe;AACjCI,QAAAA,SAAS,IAAMV,UAAU,CAACS,MAAX,GAAkB,CAAnB,KAA0BH,IAA3B,GAAkCM,GAAG,CAACC,IAAtC,GAA6CD,GAAG,CAACC,IAAJ,GAAS,KAAnE;AACA,OAFD;AAGA,0BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEH,SADF,CADD;AAKA;;AACD,WAAO,EAAP;AACA,GApCiC,CAsClC;;;AACAI,EAAAA,MAAM,GAAE;AACP;AACA,UAAMC,GAAG,GAAG;AAACC,MAAAA,UAAU,EAAC;AAACC,QAAAA,IAAI,EAAC,EAAN;AAAUC,QAAAA,MAAM,EAAC;AAAjB;AAAZ,KAAZ;AACA,wBACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAEH,GAAG,CAACC,UAAb;AAAyB,MAAA,EAAE,EAAED,GAAG,CAACC,UAAjC;AAA6C,MAAA,EAAE,EAAED,GAAG,CAACC,UAArD;AAAiE,MAAA,SAAS,EAAC,UAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKnB,UAAL,CAAgB,KAAKF,KAAL,CAAWI,GAA3B,CADF,CADD,CADD,CADD,CADD;AAWA;;AArDiC,C,CAwDnC;AACA;;;AACA,MAAMoB,eAAe,GAAIvB,KAAD,IAAW;AAC/B,SAAM;AACFG,IAAAA,GAAG,EAACH,KAAK,CAACwB;AADR,GAAN;AAGH,CAJD,C,CAMA;AACA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACxC,SAAO;AACAC,IAAAA,YAAY,EAAEC,IAAD,IAAU;AACnBhC,MAAAA,GAAG,CAACiC,WAAJ,CAAgBH,QAAhB,EAA0BE,IAA1B;AACH;AAHD,GAAP;AAKA,CAND,C,CAQA;;;AACA,eAAejC,OAAO,CAAC4B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C5B,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Row, Col, CardBody, Container} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport DAO from \"../components/Dao\";\n\n/**\n * Clase del componente miga de pan\n */\nclass BreadCrumbs extends Component{\n\n\t/**\n\t * Constructor\n\t */\n    constructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {}\n\t\tthis.breadCrumb = this.breadCrumb.bind(this);\n\t}\n\n\t/**\n\t * Funcion que construye la miga de pan \n\t * @param {*} obj Contiene la información del store que contiene la respuesta de la consulta \n\t */\n\tbreadCrumb(obj){\n\n\t\tvar categories;\n\t\tconsole.log(obj);\n\t\tif(this.props.match.params.id) categories = obj.item.categories;\n\t\telse categories = obj.query.categorie;\n\t\t\n\t\t//Verificamos si hay valores retornados para la construcción de las categorias que conforman la miga de pan \n\t\tif(categories && categories.length > 0){\n\t\t\t//Variable con la que concatenamos la miga de paan \n\t\t\tvar breadcrub = \"\";\n\t\t\tcategories.forEach((val, item) => {\n\t\t\t\tbreadcrub += ((categories.length-1) === item)? val.name : val.name+\" > \";\n\t\t\t});\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t{breadcrub}\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\t//Funcion que renderiza el componente\n\trender(){\n\t\t//Definimos los tamaños y posiciones del renderizado \n\t\tconst pos = {breadcrumb:{size:10, offset:1}}\n\t\treturn(\n\t\t\t<CardBody>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs={pos.breadcrumb} sm={pos.breadcrumb} md={pos.breadcrumb} className=\"BreadCol\">\n\t\t\t\t\t\t<Container fluid={true}>\n\t\t\t\t\t\t\t{this.breadCrumb(this.props.obj)}\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</CardBody>\n\t\t)\n\t}\n}\n\n//Funcion que conecta al store a travez del reducer \n//obj es cargado a las props y permite acceder a los datos gestionados por el distpacher ReducerSearch -> Rsearch\nconst mapStateToProps = (state) => {\n    return{\n        obj:state.ReducerSearch\n    }\n}\n \n//Funcion que instancia la funcion distpatch la cual recibe el valor que le permite al distpache \n//identificar la accion a realizar sobre el store\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n        callDispatch:(data) => {\n            DAO.getProducts(dispatch, data);\n        }\n    }\n}\n\n//connectamos al redux los metodos instanciados.\nexport default connect(mapStateToProps, mapDispatchToProps)(BreadCrumbs);"]},"metadata":{},"sourceType":"module"}