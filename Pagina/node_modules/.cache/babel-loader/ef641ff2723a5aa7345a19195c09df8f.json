{"ast":null,"code":"/**\n* Objeto modelo para estructurar el store \n* @param {*} query Objeto para almacenar todos los productos de una consulta \n* @param {*} item Datos de un producto consultado \n*/\nconst objQuery = {\n  query: [],\n  item: []\n};\n/**\n * Función que hace parte del dispatcher y gestiona el store para los objetos query y item \n * @param {*} state Estado del store para ser mutado \n * @param {*} action Objeto con la información de gestión \n */\n\nfunction RSearch(state = objQuery, action) {\n  //Creamos una copia del store \n  var NewState = Object.assign({}, state); //Seteamos en la copia del store los datos que son enviados en el action \n\n  if (action.type === \"setProducts\") NewState.query = action.data;\n  if (action.type === \"setProduct\") NewState.item = action.data; //Limpiamos el contenido del store para evitar carga de información rapida que no \n  //corresponda a la consultada dado el proceso asyncrono de API Rest\n\n  if (action.type === \"cQuery\") NewState.query = [];\n  if (action.type === \"cItem\") NewState.item = [];\n  return NewState;\n}\n/**\n* Objeto con las instancias de las funciones del Modulo RSearcho instancia del distpacher\n**/\n\n\nconst ReducerSearch = {\n  RSearch\n};\nexport default ReducerSearch;","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/src/components/RSearch.js"],"names":["objQuery","query","item","RSearch","state","action","NewState","Object","assign","type","data","ReducerSearch"],"mappings":"AAAA;;;;;AAKA,MAAMA,QAAQ,GAAG;AAACC,EAAAA,KAAK,EAAC,EAAP;AAAWC,EAAAA,IAAI,EAAC;AAAhB,CAAjB;AAEA;;;;;;AAKA,SAASC,OAAT,CAAiBC,KAAK,GAAGJ,QAAzB,EAAmCK,MAAnC,EAA0C;AACtC;AACA,MAAIC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBJ,KAAjB,CAAf,CAFsC,CAGtC;;AACA,MAAGC,MAAM,CAACI,IAAP,KAAgB,aAAnB,EAAkCH,QAAQ,CAACL,KAAT,GAAiBI,MAAM,CAACK,IAAxB;AAClC,MAAGL,MAAM,CAACI,IAAP,KAAgB,YAAnB,EAAiCH,QAAQ,CAACJ,IAAT,GAAgBG,MAAM,CAACK,IAAvB,CALK,CAMtC;AACA;;AACA,MAAGL,MAAM,CAACI,IAAP,KAAgB,QAAnB,EAA8BH,QAAQ,CAACL,KAAT,GAAiB,EAAjB;AAC9B,MAAGI,MAAM,CAACI,IAAP,KAAgB,OAAnB,EAA4BH,QAAQ,CAACJ,IAAT,GAAgB,EAAhB;AAC5B,SAAOI,QAAP;AAEH;AAED;;;;;AAGA,MAAMK,aAAa,GAAG;AAACR,EAAAA;AAAD,CAAtB;AAEA,eAAeQ,aAAf","sourcesContent":["/**\n* Objeto modelo para estructurar el store \n* @param {*} query Objeto para almacenar todos los productos de una consulta \n* @param {*} item Datos de un producto consultado \n*/\nconst objQuery = {query:[], item:[]}\n\n/**\n * Función que hace parte del dispatcher y gestiona el store para los objetos query y item \n * @param {*} state Estado del store para ser mutado \n * @param {*} action Objeto con la información de gestión \n */\nfunction RSearch(state = objQuery, action){\n    //Creamos una copia del store \n    var NewState = Object.assign({},state);\n    //Seteamos en la copia del store los datos que son enviados en el action \n    if(action.type === \"setProducts\") NewState.query = action.data;\n    if(action.type === \"setProduct\") NewState.item = action.data;\n    //Limpiamos el contenido del store para evitar carga de información rapida que no \n    //corresponda a la consultada dado el proceso asyncrono de API Rest\n    if(action.type === \"cQuery\")  NewState.query = [];\n    if(action.type === \"cItem\") NewState.item = [];\n    return NewState;\n    \n}\n\n/**\n* Objeto con las instancias de las funciones del Modulo RSearcho instancia del distpacher\n**/\nconst ReducerSearch = {RSearch}\n\nexport default ReducerSearch;"]},"metadata":{},"sourceType":"module"}