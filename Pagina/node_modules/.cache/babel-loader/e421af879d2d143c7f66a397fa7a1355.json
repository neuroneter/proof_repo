{"ast":null,"code":"var _jsxFileName = \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/src/canvan/Header.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, CardImg, InputGroupAddon, InputGroup, InputGroupText, Input, CardHeader, Container } from 'reactstrap';\nimport Logo from \"../assets/images/Logo_ML.png\";\nimport searchIcon from \"../assets/images/ic_Search.png\";\nimport { connect } from 'react-redux';\nimport DAO from \"../components/Dao\";\nimport queryString from 'query-string';\n/**\n * Clase del componente que se encarga del buscador\n */\n\nclass Header extends Component {\n  /**\n  * Constructor\n  */\n  constructor(props) {\n    super(props); //Definimos el estado y cargamos en el, el valor de la busqueda \n    //si no hay valor se asigna un valor en blanco \n\n    this.state = {\n      find: this.props.match.params.search ? this.props.match.params.search : \"\"\n    };\n  } //Funcion nativa que es ejecutada automaticamente al cargar el componente \n  //buscamos identificaar si hay una busqueda previa al cargar el componente\n\n\n  componentDidMount() {\n    //Obtenemos la ubicaci칩n de la ruta donde nos encontramos esto se realiza ya que este componente\n    //es cargado en dos rutas y solo en una el componente al ser llamado realizara un llamado para busqueda\n    //automatica \n    var pathname = String(this.props.location.pathname); //Si nos encontramos en la ruta /items y se llama este componente realizaremos una llamada Rest automatica\n\n    if (pathname === \"/items\") {\n      //obtenemos el varlo de la busqueda \n      let find = queryString.parse(this.props.location.search); //Si este valor existe lo asignamos al state local y llamamos una vez asignado a la funcion que llama\n      //al distpatch \n\n      find = String(find.search) !== \"undefined\" ? String(find.search) : \"\";\n      this.setState({\n        find\n      }, () => {\n        //llamamos al dispatch primero pasando por el Dao que recupera los datos desde API Rest\n        this.callFind();\n      });\n    }\n  }\n  /**\n   * Funcion que es llamada cuando se realiza una acci칩n enter de busqueda o clic en buscar \n   */\n\n\n  callFind() {\n    //Verifica si un Id de Item para enviar a limpiar el objeto store de la ultima consulta de productos \n    //con el fin de evitar visualizar los productos de una busqueda pasada esto por unos segundos \n    if (this.props.match.params.id !== undefined) this.props.clearProducts(\"cQuery\"); //verificamos si hay un valor cargado de busqueda, se hace por si se recarga o se ingresa \n    //con una url que contenga definida una busqueda \n\n    var search = this.state.find !== \"\" ? '?search=' + this.state.find : \"\"; //Redireccionamos al la ruta que renderiza la informaci칩n del producto \n\n    this.props.history.push({\n      pathname: '/items',\n      search\n    }); //llamamos al distpatch que pasa primero por una llamada al API Rest a travez del DAO \n\n    this.props.callDispatch(this.state.find);\n  } //Funcion que renderiza el componente\n\n\n  render() {\n    //Definimos los tama침os y posiciones del renderizado \n    const pos = {\n      logo: {\n        size: 1,\n        offset: 1\n      },\n      barSerch: {\n        size: 9\n      }\n    };\n    return /*#__PURE__*/React.createElement(CardHeader, {\n      className: \"bg-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: pos.logo,\n      className: \"prodHCol1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: Logo,\n      className: \"d-block\",\n      alt: \"Mercadolibre.com\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: pos.barSerch,\n      className: \"prodHCol2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      id: \"name\",\n      placeholder: \"Nunca dejes de buscar\",\n      defaultValue: this.state.find,\n      onChange: find => {\n        this.setState({\n          find: find.target.value\n        });\n      },\n      onKeyDown: e => {\n        if (e.key === 'Enter') this.callFind();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n      addonType: \"prepend\",\n      onClick: this.callFind.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(InputGroupText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CardImg, {\n      width: \"100%\",\n      src: searchIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 53\n      }\n    }))))))));\n  }\n\n} //Funcion que conecta al store a travez del reducer \n//obj es cargado a las props y permite acceder a los datos gestionados por el distpacher ReducerSearch -> Rsearch\n\n\nconst mapStateToProps = state => {\n  return {\n    obj: state.ReducerSearch\n  };\n}; //Funcion que instancia la funcion distpatch la cual recibe el valor que le permite al distpache \n//identificar la accion a realizar sobre el store\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    callDispatch: data => {\n      DAO.getProducts(dispatch, data);\n    },\n    clearProducts: type => {\n      dispatch({\n        type\n      });\n    }\n  };\n}; //connectamos al redux los metodos instanciados.\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/src/canvan/Header.js"],"names":["React","Component","Row","Col","CardImg","InputGroupAddon","InputGroup","InputGroupText","Input","CardHeader","Container","Logo","searchIcon","connect","DAO","queryString","Header","constructor","props","state","find","match","params","search","componentDidMount","pathname","String","location","parse","setState","callFind","id","undefined","clearProducts","history","push","callDispatch","render","pos","logo","size","offset","barSerch","target","value","e","key","bind","mapStateToProps","obj","ReducerSearch","mapDispatchToProps","dispatch","data","getProducts","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Row, Col, CardImg, InputGroupAddon, InputGroup, InputGroupText, Input, CardHeader, Container} from 'reactstrap';\nimport Logo from \"../assets/images/Logo_ML.png\";\nimport searchIcon from \"../assets/images/ic_Search.png\";\nimport { connect } from 'react-redux';\nimport DAO from \"../components/Dao\";\nimport queryString from 'query-string';\n\n/**\n * Clase del componente que se encarga del buscador\n */\nclass Header extends Component{\n\n    /**\n\t * Constructor\n\t */\n    constructor(props) {\n        super(props);\n        //Definimos el estado y cargamos en el, el valor de la busqueda \n        //si no hay valor se asigna un valor en blanco \n        this.state = {\n            find:(this.props.match.params.search)?this.props.match.params.search:\"\",\n        };\n    }\n\n    //Funcion nativa que es ejecutada automaticamente al cargar el componente \n    //buscamos identificaar si hay una busqueda previa al cargar el componente\n    componentDidMount(){\n        //Obtenemos la ubicaci칩n de la ruta donde nos encontramos esto se realiza ya que este componente\n        //es cargado en dos rutas y solo en una el componente al ser llamado realizara un llamado para busqueda\n        //automatica \n        var pathname = String(this.props.location.pathname)\n        //Si nos encontramos en la ruta /items y se llama este componente realizaremos una llamada Rest automatica\n        if(pathname === \"/items\"){\n            //obtenemos el varlo de la busqueda \n            let find = queryString.parse(this.props.location.search);\n            //Si este valor existe lo asignamos al state local y llamamos una vez asignado a la funcion que llama\n            //al distpatch \n            find = (String(find.search) !== \"undefined\")?String(find.search):\"\";\n            this.setState({find},() => {\n                //llamamos al dispatch primero pasando por el Dao que recupera los datos desde API Rest\n                this.callFind();\n            });\n        }\n    }\n    \n    /**\n     * Funcion que es llamada cuando se realiza una acci칩n enter de busqueda o clic en buscar \n     */\n    callFind(){\n        //Verifica si un Id de Item para enviar a limpiar el objeto store de la ultima consulta de productos \n        //con el fin de evitar visualizar los productos de una busqueda pasada esto por unos segundos \n        if(this.props.match.params.id !== undefined) this.props.clearProducts(\"cQuery\");\n        //verificamos si hay un valor cargado de busqueda, se hace por si se recarga o se ingresa \n        //con una url que contenga definida una busqueda \n        var search = (this.state.find !== \"\")? '?search='+this.state.find:\"\";\n        //Redireccionamos al la ruta que renderiza la informaci칩n del producto \n        this.props.history.push({\n            pathname: '/items',\n            search\n        })\n        //llamamos al distpatch que pasa primero por una llamada al API Rest a travez del DAO \n        this.props.callDispatch(this.state.find);\n    }\n    \n    //Funcion que renderiza el componente\n\trender(){\n        //Definimos los tama침os y posiciones del renderizado \n        const pos = {logo:{size:1, offset:1} , barSerch:{size:9}}\n\t\treturn(\n            <CardHeader className=\"bg-success\">\n                <Row>\n                    <Col md={pos.logo} className=\"prodHCol1\">\n                        <Container fluid={true}>\n                            <img src={Logo} className=\"d-block\" alt=\"Mercadolibre.com\" />\n                        </Container>\n                    </Col>\n\n                    <Col md={pos.barSerch} className=\"prodHCol2\">\n                        <Container fluid={true}>\n                            <InputGroup>\n                                <Input type=\"text\" id=\"name\" placeholder=\"Nunca dejes de buscar\" defaultValue={this.state.find} onChange={(find) => {this.setState({find:find.target.value})}} onKeyDown={(e) => {if (e.key === 'Enter') this.callFind()}}/>\n                                    <InputGroupAddon addonType=\"prepend\" onClick={this.callFind.bind(this)}>\n                                    <InputGroupText><CardImg width=\"100%\" src={searchIcon}/></InputGroupText>\n                                </InputGroupAddon>\n                            </InputGroup>\n                        </Container>\n                    </Col>\n                </Row>\n            </CardHeader>\n\t\t)\n\t}\n}\n\n//Funcion que conecta al store a travez del reducer \n//obj es cargado a las props y permite acceder a los datos gestionados por el distpacher ReducerSearch -> Rsearch\nconst mapStateToProps = (state) => {\n    return{\n        obj:state.ReducerSearch\n    }\n}\n \n//Funcion que instancia la funcion distpatch la cual recibe el valor que le permite al distpache \n//identificar la accion a realizar sobre el store\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n        callDispatch:(data) => {\n            DAO.getProducts(dispatch, data);\n        },\n        clearProducts:(type) => {\n            dispatch({type});\n        }\n    }\n}\n\n//connectamos al redux los metodos instanciados.\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);"]},"metadata":{},"sourceType":"module"}