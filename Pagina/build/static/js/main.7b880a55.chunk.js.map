{"version":3,"sources":["components/RSearch.js","index.js"],"names":["objQuery","query","item","ReducerSearch","RSearch","state","action","NewState","Object","assign","type","data","ProductList","lazy","Product","reducer","combineReducers","store","createStore","applyMiddleware","thunk","promise","Router","BrowserRouter","ref","this","props","innerRef","fallback","Switch","Route","path","render","exact","Component","ReactDOM","document","getElementById"],"mappings":"sQAKMA,EAAW,CAACC,MAAM,GAAIC,KAAK,IAyBjC,IAEeC,EAFO,CAACC,QAlBvB,WAA2C,IAA1BC,EAAyB,uDAAjBL,EAAUM,EAAO,uCAElCC,EAAWC,OAAOC,OAAO,GAAGJ,GAUhC,MARmB,gBAAhBC,EAAOI,OAAwBH,EAASN,MAAQK,EAAOK,MACvC,eAAhBL,EAAOI,OAAuBH,EAASL,KAAOI,EAAOK,MAGrC,WAAhBL,EAAOI,OAAoBH,EAASN,MAAQ,IAC5B,UAAhBK,EAAOI,OAAkBH,EAASL,KAAO,IAGrCK,I,wBCbLK,G,MAAcC,gBAAK,kBAAM,uDACzBC,EAAUD,gBAAK,kBAAM,sDAGrBE,EAAUC,YAAgB,CAK5Bb,cAAeA,EAAcC,UAI3Ba,EAAQC,YAAYH,EAASI,YAAgBC,IAAOC,MAMpDC,E,uKAIJ,OACU,kBAACC,EAAA,EAAD,CAAeC,IAAKC,KAAKC,MAAMC,UAC3B,kBAAC,IAAD,CAAUV,MAAOA,GAC5B,kBAAC,WAAD,CAAUW,SAAU,sDACnB,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAQC,KAAK,IAAIC,OAAQ,SAAAN,GAAK,OAAI,kBAACd,EAAgBc,IAAYO,OAAK,IACpE,kBAACH,EAAA,EAAD,CAAOC,KAAK,SAAUC,OAAQ,SAAAN,GAAK,OAAI,kBAACd,EAAgBc,IAAYO,OAAK,IACzE,kBAACH,EAAA,EAAD,CAAOC,KAAK,aAAaC,OAAQ,SAAAN,GAAK,OAAI,kBAACZ,EAAYY,IAAWO,OAAK,Y,GAXzDC,aAoBrBC,IAASH,OACR,kBAAC,EAAD,MACAI,SAASC,eAAe,W","file":"static/js/main.7b880a55.chunk.js","sourcesContent":["/**\n* Objeto modelo para estructurar el store \n* @param {*} query Objeto para almacenar todos los productos de una consulta \n* @param {*} item Datos de un producto consultado \n*/\nconst objQuery = {query:[], item:[]}\n\n/**\n * Función que hace parte del dispatcher y gestiona el store para los objetos query y item \n * @param {*} state Estado del store para ser mutado \n * @param {*} action Objeto con la información de gestión \n */\nfunction RSearch(state = objQuery, action){\n    //Creamos una copia del store \n    var NewState = Object.assign({},state);\n    //Seteamos en la copia del store los datos que son enviados en el action \n    if(action.type === \"setProducts\") NewState.query = action.data;\n    if(action.type === \"setProduct\") NewState.item = action.data;\n    //Limpiamos el contenido del store para evitar carga de información rapida que no \n    //corresponda a la consultada dado el proceso asyncrono de API Rest\n    if(action.type === \"cQuery\")  NewState.query = [];\n    if(action.type === \"cItem\") NewState.item = [];\n\n    //Retornamos la copia del estado para mutarl la store \n    return NewState;\n}\n\n/**\n* Objeto con las instancias de las funciones del Modulo RSearcho instancia del distpacher\n**/\nconst ReducerSearch = {RSearch}\n\nexport default ReducerSearch;","import React, { Suspense, lazy, Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport promise from \"redux-promise-middleware\";\nimport thunk from 'redux-thunk'\nimport ReducerSearch from './components/RSearch';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport \"./styles/Canvan.scss\";\n\n//Cargamos con Lazy solo el modulo solicitado  \nconst ProductList = lazy(() => import(\"./canvan/ProductList\"));\nconst Product = lazy(() => import(\"./canvan/Product\"));\n\n//Instanciamos los componente al reducer que gestiona el almacenamiento del store\nconst reducer = combineReducers({\n\t/** \n\t * El componente ReducerSerch se encargara de gestionar la información que sera requerida por \n\t * los compoentes ProductList y Product \n\t**/\n    ReducerSearch: ReducerSearch.RSearch, \n});\n\n//Store que gestionara el estado global de la apliación\nconst store = createStore(reducer, applyMiddleware(thunk, promise));\n\n/** *\n * Componente que gestiona el enrutamiento de la pagina \n * Se define la store redux para mantener centralizado los datos y su acceso\n*/\nclass Router extends Component{\n\n\t//Renderizamos el componente que de acuerdo a la ruta esta siendo solicitado\n\trender(){\n\t\treturn(\n            <BrowserRouter ref={this.props.innerRef}>\n                <Provider store={store} >\n\t\t\t\t\t<Suspense fallback={<div>Loading Módulo...</div>}>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route  path=\"/\" render={props => <ProductList {...props} />}  exact/>\n\t\t\t\t\t\t\t<Route path=\"/items\"  render={props => <ProductList {...props} />}  exact/>\n\t\t\t\t\t\t\t<Route path=\"/items/:id\" render={props => <Product {...props} />} exact/>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Suspense>\n                </Provider>\n            </BrowserRouter>\n\t\t)\t\n\t}\n}\n\nReactDOM.render(\n\t<Router/>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}