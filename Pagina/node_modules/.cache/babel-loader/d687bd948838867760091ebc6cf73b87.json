{"ast":null,"code":"/**\n* Objeto modelo para estructurar el store \n* @param {*} query Objeto para almacenar todos los productos de una consulta \n* @param {*} item Datos de un producto consultado \n*/var objQuery={query:[],item:[]};/**\n * Función que hace parte del dispatcher y gestiona el store para los objetos query y item \n * @param {*} state Estado del store para ser mutado \n * @param {*} action Objeto con la información de gestión \n */function RSearch(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:objQuery;var action=arguments.length>1?arguments[1]:undefined;//Creamos una copia del store \nvar NewState=Object.assign({},state);//Seteamos en la copia del store los datos que son enviados en el action \nif(action.type===\"setProducts\")NewState.query=action.data;if(action.type===\"setProduct\")NewState.item=action.data;//Limpiamos el contenido del store para evitar carga de información rapida que no \n//corresponda a la consultada dado el proceso asyncrono de API Rest\nif(action.type===\"cQuery\")NewState.query=[];if(action.type===\"cItem\")NewState.item=[];//Retornamos la copia del estado para mutarl la store \nreturn NewState;}/**\n* Objeto con las instancias de las funciones del Modulo RSearcho instancia del distpacher\n**/var ReducerSearch={RSearch:RSearch};export default ReducerSearch;","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/src/components/RSearch.js"],"names":["objQuery","query","item","RSearch","state","action","NewState","Object","assign","type","data","ReducerSearch"],"mappings":"AAAA;;;;EAKA,GAAMA,CAAAA,QAAQ,CAAG,CAACC,KAAK,CAAC,EAAP,CAAWC,IAAI,CAAC,EAAhB,CAAjB,CAEA;;;;GAKA,QAASC,CAAAA,OAAT,EAA0C,IAAzBC,CAAAA,KAAyB,2DAAjBJ,QAAiB,IAAPK,CAAAA,MAAO,2CACtC;AACA,GAAIC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAiBJ,KAAjB,CAAf,CACA;AACA,GAAGC,MAAM,CAACI,IAAP,GAAgB,aAAnB,CAAkCH,QAAQ,CAACL,KAAT,CAAiBI,MAAM,CAACK,IAAxB,CAClC,GAAGL,MAAM,CAACI,IAAP,GAAgB,YAAnB,CAAiCH,QAAQ,CAACJ,IAAT,CAAgBG,MAAM,CAACK,IAAvB,CACjC;AACA;AACA,GAAGL,MAAM,CAACI,IAAP,GAAgB,QAAnB,CAA8BH,QAAQ,CAACL,KAAT,CAAiB,EAAjB,CAC9B,GAAGI,MAAM,CAACI,IAAP,GAAgB,OAAnB,CAA4BH,QAAQ,CAACJ,IAAT,CAAgB,EAAhB,CAE5B;AACA,MAAOI,CAAAA,QAAP,CACH,CAED;;GAGA,GAAMK,CAAAA,aAAa,CAAG,CAACR,OAAO,CAAPA,OAAD,CAAtB,CAEA,cAAeQ,CAAAA,aAAf","sourcesContent":["/**\n* Objeto modelo para estructurar el store \n* @param {*} query Objeto para almacenar todos los productos de una consulta \n* @param {*} item Datos de un producto consultado \n*/\nconst objQuery = {query:[], item:[]}\n\n/**\n * Función que hace parte del dispatcher y gestiona el store para los objetos query y item \n * @param {*} state Estado del store para ser mutado \n * @param {*} action Objeto con la información de gestión \n */\nfunction RSearch(state = objQuery, action){\n    //Creamos una copia del store \n    var NewState = Object.assign({},state);\n    //Seteamos en la copia del store los datos que son enviados en el action \n    if(action.type === \"setProducts\") NewState.query = action.data;\n    if(action.type === \"setProduct\") NewState.item = action.data;\n    //Limpiamos el contenido del store para evitar carga de información rapida que no \n    //corresponda a la consultada dado el proceso asyncrono de API Rest\n    if(action.type === \"cQuery\")  NewState.query = [];\n    if(action.type === \"cItem\") NewState.item = [];\n\n    //Retornamos la copia del estado para mutarl la store \n    return NewState;\n}\n\n/**\n* Objeto con las instancias de las funciones del Modulo RSearcho instancia del distpacher\n**/\nconst ReducerSearch = {RSearch}\n\nexport default ReducerSearch;"]},"metadata":{},"sourceType":"module"}