{"ast":null,"code":"import _classCallCheck from\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{CardBody,Button,Row,Col,Container}from'reactstrap';import{connect}from'react-redux';import DAO from\"../components/Dao\";import Header from'./Header';import Breadcrumbs from'./Breadcrumbs';import Footer from'./Footer';import parse from'html-react-parser';import CurrencyFormat from'react-currency-format';/**\n * Clase del componente Product\n * Encargada de gestionar la visiualización de información del producto \n */var Product=/*#__PURE__*/function(_Component){_inherits(Product,_Component);var _super=_createSuper(Product);/**\n\t * Constructor\n\t */function Product(props){var _this;_classCallCheck(this,Product);_this=_super.call(this,props);//Asignamos la funcion CardProduct con el contexto de la clase \n_this.cardProduct=_this.cardProduct.bind();//realizamos un llamado inicial a la funcion callDispatch del dispatch para recuperar la información \n_this.props.callDispatch(_this.props.match.params.id);return _this;}/**\n\t * Funcion que construye dinamicamente el productos de la busqueda \n\t * esta es llamada cada vez que el objeto del store es modificado con la información del producto \n\t * @param {*} obj Objeto del store\n\t */_createClass(Product,[{key:\"cardProduct\",value:function cardProduct(obj){//Cargamos del objeto la información del Item (producto) retornado\nvar item=obj.item;//Verificamos que exista información retornada para este producto\nif(item){//Redondeamos el precio para no tener decimales \nvar price=Math.round(item.price.amount,-1);//Definimos los tamaños de cada parte \nvar pos={img:{size:7,offset:1},price:{size:3},desc:{size:10,offset:1}};//Una vez maquetada la información retornamos la información para ser renderizada\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:pos.img,className:\"prodCol1\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(\"img\",{src:item.picture,className:\"mx-auto d-block\",alt:item.titles}))),/*#__PURE__*/React.createElement(Col,{md:pos.price,className:\"prodCol2\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{className:\"condition text-dark\"},item.condition,\" - \",item.sold_quantity,\" Vendidos\")),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{className:\"title text-dark\"},item.title)),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{className:\"price text-dark\"},/*#__PURE__*/React.createElement(CurrencyFormat,{value:price,displayType:'text',thousandSeparator:\".\",decimalSeparator:\",\",prefix:'$ ',renderText:function renderText(value){return value;}}))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{className:\"button\"},/*#__PURE__*/React.createElement(Button,{block:true,color:\"primary\"},\"Comprar\")))))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:pos.desc,className:\"prodCol3\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{className:\"title\"},\"Descripci\\xF3n del producto\")),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{className:\"content\"},parse(item.description)))))));}}//Metodo del compoente que renderiza la salida este componente consume los siguientes compoentes externos\n//Header: Compoente que se encarga del buscargdor, pasamos los props ya que seran utilizados \n//BreadCrumbs: Se encarga de la miga de pan aunque en este test se visializa un dumy \n//Footer: Componente que se encarga del pie de la pagina \n//Para renderizar los productos utilizamos la llamada a la funcion cardProduct la cual esta definida en el\n//constructor con el contexto, esta al tener la referencia al objeto store hara que cada vez que se actualiza\n//el store dispare la llamada al metodo, generando un nuevo renderizado. \n},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(Container,{fluid:true,className:\"p-0 bg-light\"},/*#__PURE__*/React.createElement(Header,this.props),/*#__PURE__*/React.createElement(Breadcrumbs,null),/*#__PURE__*/React.createElement(CardBody,null,this.cardProduct(this.props.obj)),/*#__PURE__*/React.createElement(Footer,null));}}]);return Product;}(Component);//Funcion que conecta al store a travez del reducer \n//obj es cargado a las props y permite acceder a los datos gestionados por el distpacher ReducerSearch -> Rsearch\nvar mapStateToProps=function mapStateToProps(state){return{obj:state.ReducerSearch.item};};//Funcion que instancia la funcion distpatch la cual recibe el valor que le permite al distpache \n//identificar la accion a realizar sobre el store\nvar mapDispatchToProps=function mapDispatchToProps(dispatch){return{callDispatch:function callDispatch(data){DAO.getProduct(dispatch,data);}};};//connectamos al redux los metodos instanciados.\nexport default connect(mapStateToProps,mapDispatchToProps)(Product);","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/src/canvan/Product.js"],"names":["React","Component","CardBody","Button","Row","Col","Container","connect","DAO","Header","Breadcrumbs","Footer","parse","CurrencyFormat","Product","props","cardProduct","bind","callDispatch","match","params","id","obj","item","price","Math","round","amount","pos","img","size","offset","desc","picture","titles","condition","sold_quantity","title","value","description","mapStateToProps","state","ReducerSearch","mapDispatchToProps","dispatch","data","getProduct"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {CardBody, Button, Row, Col, Container} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport DAO from \"../components/Dao\";\nimport Header from './Header';\nimport Breadcrumbs from './Breadcrumbs';\nimport Footer from './Footer'\nimport parse from 'html-react-parser';\nimport CurrencyFormat from 'react-currency-format';\n\n/**\n * Clase del componente Product\n * Encargada de gestionar la visiualización de información del producto \n */\nclass Product extends Component{\n\n    /**\n\t * Constructor\n\t */\n\tconstructor(props) {\n        super(props);\n        //Asignamos la funcion CardProduct con el contexto de la clase \n        this.cardProduct = this.cardProduct.bind();\n\n        //realizamos un llamado inicial a la funcion callDispatch del dispatch para recuperar la información \n        this.props.callDispatch(this.props.match.params.id);\n    }\n\n    /**\n\t * Funcion que construye dinamicamente el productos de la busqueda \n\t * esta es llamada cada vez que el objeto del store es modificado con la información del producto \n\t * @param {*} obj Objeto del store\n\t */\n    cardProduct(obj){\n        //Cargamos del objeto la información del Item (producto) retornado\n        var item = obj.item;\n        //Verificamos que exista información retornada para este producto\n        if(item){\n            //Redondeamos el precio para no tener decimales \n            var price = Math.round(item.price.amount, -1);\n            //Definimos los tamaños de cada parte \n            const pos = {img:{size:7, offset:1} , price:{size:3}, desc:{size:10, offset:1}}\n            //Una vez maquetada la información retornamos la información para ser renderizada\n            return (\n                <div>\n                    <Row>\n                        <Col md={pos.img} className=\"prodCol1\">\n                            <Container fluid={true}>\n                                <img src={item.picture} className=\"mx-auto d-block\" alt={item.titles}/>\n                            </Container>\n                        </Col>\n                        <Col md={pos.price} className=\"prodCol2\" >\n                            <Container fluid={true}>\n                                <Row>\n                                    <Col className=\"condition text-dark\">\n                                        {item.condition} - {item.sold_quantity} Vendidos\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col className=\"title text-dark\">\n                                        {item.title}\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col className=\"price text-dark\">\n                                        <CurrencyFormat value={price} displayType={'text'} thousandSeparator={\".\"} decimalSeparator={\",\"} prefix={'$ '} renderText={value => value} />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col className=\"button\">\n                                        <Button block color=\"primary\">Comprar</Button>\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={pos.desc} className=\"prodCol3\" >\n                            <Container fluid={true}>\n                                <Row>\n                                    <Col className=\"title\">\n                                        Descripción del producto\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col className=\"content\">\n                                        {parse(item.description)}\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n    }\n\n    //Metodo del compoente que renderiza la salida este componente consume los siguientes compoentes externos\n    //Header: Compoente que se encarga del buscargdor, pasamos los props ya que seran utilizados \n\t//BreadCrumbs: Se encarga de la miga de pan aunque en este test se visializa un dumy \n\t//Footer: Componente que se encarga del pie de la pagina \n\t//Para renderizar los productos utilizamos la llamada a la funcion cardProduct la cual esta definida en el\n\t//constructor con el contexto, esta al tener la referencia al objeto store hara que cada vez que se actualiza\n\t//el store dispare la llamada al metodo, generando un nuevo renderizado. \n\trender(){\n\t\treturn(\n            <Container fluid={true} className=\"p-0 bg-light\">\n\t\t\t\t<Header {...this.props}/>\n                <Breadcrumbs/>\n                <CardBody>\n                    {this.cardProduct(this.props.obj)}\n                </CardBody>\n                <Footer/>\n            </Container>\n\t\t)\t\n\t}\n}\n\n//Funcion que conecta al store a travez del reducer \n//obj es cargado a las props y permite acceder a los datos gestionados por el distpacher ReducerSearch -> Rsearch\nconst mapStateToProps = (state) => {\n    return{\n        obj:state.ReducerSearch.item,\n    }\n}\n\n//Funcion que instancia la funcion distpatch la cual recibe el valor que le permite al distpache \n//identificar la accion a realizar sobre el store\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n        callDispatch:(data) => {\n            DAO.getProduct(dispatch, data);\n        }\n    }\n}\n\n//connectamos al redux los metodos instanciados.\nexport default connect(mapStateToProps, mapDispatchToProps)(Product);"]},"metadata":{},"sourceType":"module"}