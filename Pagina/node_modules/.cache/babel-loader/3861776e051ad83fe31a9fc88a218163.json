{"ast":null,"code":"//Importamos los Enumeradores de constantes \nimport Enum from \"./Enum\";\n/**\n * Función que consume el servicio que retorna el listado de los productos \n * @param {*} dispatch Dispatch para la gestión del store\n * @param {*} textFind Valor buscado \n */\n\nfunction getProducts(dispatch, textFind) {\n  apiCall(Enum.routes.UrlItems + textFind, dispatch, \"setProducts\");\n}\n/**\n * Funcion que consume el servicio que retorna la información de un producto\n * @param {*} dispatch Dispatch para la gestión del store\n * @param {*} idFind id del producto a buscar \n */\n\n\nfunction getProduct(dispatch, idFind) {\n  apiCall(Enum.routes.UrlItem + idFind, dispatch, \"setProduct\");\n}\n/**\n * Fucion para el llamado a API Rest \n * @param {*} queryUrl Ruta del EndPoint a consumir\n * @param {*} dispatch Funcion dispatch que se dispara con el resultado retornado por el Api Rest \n * @param {*} type Indica al dispatch cual es la gestión a realizar dentro del store\n */\n\n\nfunction apiCall(queryUrl, dispatch, type) {\n  fetch(queryUrl).then(data => data.json()).then(data => {\n    dispatch({\n      type,\n      data\n    });\n  }).catch(function (error) {\n    console.log(Enum.error.err1 + error);\n  });\n}\n/**\n * Retorna un objeto con las instancias a las funciones del componente DAO\n */\n\n\nconst DAO = {\n  getProducts,\n  getProduct\n};\nexport default DAO;","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/test_ml/src/components/Dao.js"],"names":["Enum","getProducts","dispatch","textFind","apiCall","routes","UrlItems","getProduct","idFind","UrlItem","queryUrl","type","fetch","then","data","json","catch","error","console","log","err1","DAO"],"mappings":"AACA;AACA,OAAOA,IAAP,MAAiB,QAAjB;AAEA;;;;;;AAKA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,QAA/B,EAAwC;AACpCC,EAAAA,OAAO,CAACJ,IAAI,CAACK,MAAL,CAAYC,QAAZ,GAAqBH,QAAtB,EAAgCD,QAAhC,EAA0C,aAA1C,CAAP;AACH;AAED;;;;;;;AAKA,SAASK,UAAT,CAAoBL,QAApB,EAA8BM,MAA9B,EAAqC;AACjCJ,EAAAA,OAAO,CAACJ,IAAI,CAACK,MAAL,CAAYI,OAAZ,GAAoBD,MAArB,EAA6BN,QAA7B,EAAuC,YAAvC,CAAP;AACH;AAED;;;;;;;;AAMA,SAASE,OAAT,CAAiBM,QAAjB,EAA2BR,QAA3B,EAAqCS,IAArC,EAA0C;AACtCC,EAAAA,KAAK,CAACF,QAAD,CAAL,CACCG,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMC,IAAI,IAAI;AAAEZ,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAF;AAAQG,MAAAA;AAAR,KAAD,CAAR;AAAyB,GAFzC,EAGCE,KAHD,CAGO,UAAUC,KAAV,EAAiB;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAanB,IAAI,CAACiB,KAAL,CAAWG,IAAX,GAAkBH,KAA/B;AAAuC,GAHhE;AAIH;AAED;;;;;AAGA,MAAMI,GAAG,GAAG;AAAEpB,EAAAA,WAAF;AAAeM,EAAAA;AAAf,CAAZ;AAEA,eAAec,GAAf","sourcesContent":["\n//Importamos los Enumeradores de constantes \nimport Enum from \"./Enum\";\n\n/**\n * Función que consume el servicio que retorna el listado de los productos \n * @param {*} dispatch Dispatch para la gestión del store\n * @param {*} textFind Valor buscado \n */\nfunction getProducts(dispatch, textFind){\n    apiCall(Enum.routes.UrlItems+textFind, dispatch, \"setProducts\");\n}\n\n/**\n * Funcion que consume el servicio que retorna la información de un producto\n * @param {*} dispatch Dispatch para la gestión del store\n * @param {*} idFind id del producto a buscar \n */\nfunction getProduct(dispatch, idFind){\n    apiCall(Enum.routes.UrlItem+idFind, dispatch, \"setProduct\");\n}\n\n/**\n * Fucion para el llamado a API Rest \n * @param {*} queryUrl Ruta del EndPoint a consumir\n * @param {*} dispatch Funcion dispatch que se dispara con el resultado retornado por el Api Rest \n * @param {*} type Indica al dispatch cual es la gestión a realizar dentro del store\n */\nfunction apiCall(queryUrl, dispatch, type){\n    fetch(queryUrl)\n    .then(data => data.json())\n    .then(data => { dispatch({ type, data}) })\n    .catch(function (error) {console.log( Enum.error.err1 + error);}); \n}\n\n/**\n * Retorna un objeto con las instancias a las funciones del componente DAO\n */\nconst DAO = { getProducts, getProduct }\n\nexport default DAO;"]},"metadata":{},"sourceType":"module"}